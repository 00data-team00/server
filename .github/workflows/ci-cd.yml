name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # application-secret.yml 생성
      - name: application-secret.yml 생성
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_SECRET_YML }}" > src/main/resources/application-secret.yml
      # Firebase 서비스 계정 키 생성
      - name: Firebase 서비스 계정 키 생성
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > src/main/resources/firebase-service-account.json
      - name: Java 21 설정
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: JAR 빌드 (테스트 제외)
        run: ./gradlew clean build -x test

      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 도커 이미지 빌드 & 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/data00:latest

  deploy:
    name: Deploy to EC2 via SSH
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: SSH 키 설정
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 배포 스크립트 실행
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd /home/ec2-user
            
            # docker-compose.yml 생성
            cat <<EOF > docker-compose.yml
            version: '3.8'
            services:
              app:
                image: ${{ secrets.DOCKER_USERNAME }}/data00:latest
                container_name: spring-app
                ports:
                  - "8080:8080"
                volumes:
                  # 🔥 추가: 볼륨 마운트 설정
                  - /home/ec2-user/uploads:/app/uploads
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - DEEPL_AUTH_KEY=${{ secrets.DEEPL_AUTH_KEY }}
                  - DEEPL.AUTH.KEY=${{ secrets.DEEPL_AUTH_KEY }}
                restart: unless-stopped
            EOF
            
            # 기존 컨테이너 중지 및 제거
            docker-compose down
            
            # 새 이미지 풀 및 컨테이너 실행
            docker-compose pull
            docker-compose up -d
            
            # 컨테이너 상태 확인
            docker-compose ps